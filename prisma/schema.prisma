// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model user {
  id              String    @id @default(cuid())
  name            String    @unique @db.VarChar(100)
  email           String    @unique @db.VarChar(50)
  profile_picture String?   @db.Text
  role_id         Int
  role            user_role @relation(fields: [role_id], references: [id])
  password        String    @db.LongText
  shift           String?   @db.VarChar(10)
  created_at      DateTime  @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()
  updated_at      DateTime  @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.Timestamp()

  @@index([role_id])
}

model user_role {
  id   Int    @id @default(autoincrement())
  user user[]
  name String @db.VarChar(30)
}

model product {
  id          String           @id @default(cuid())
  name        String           @db.VarChar(50)
  picture     String?          @db.LongText
  price       Int
  category_id Int
  category    category_product @relation(fields: [category_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  max_age     Int?
  created_at  DateTime         @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()
  updated_at  DateTime         @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.Timestamp()

  @@index([category_id])
}

model category_product {
  id       Int       @id @default(autoincrement())
  products product[]
  name     String    @db.VarChar(50)
}

model report_ingredient {
  id          String                     @id @default(cuid())
  report_date DateTime                   @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()
  detail      detail_report_ingredient[]
  reporter    String
}

model detail_report_ingredient {
  id            Int               @id @default(autoincrement())
  ingredient_id Int
  ingredient    ingredient        @relation(fields: [ingredient_id], references: [id])
  quantity      Int
  pieces        Int
  report_id     String
  report        report_ingredient @relation(fields: [report_id], references: [id])

  @@index([report_id, ingredient_id])
}

model ingredient {
  id            Int                        @id @default(autoincrement())
  name          String                     @db.VarChar(50)
  category_id   Int
  price         Int?
  unit          Int?
  category      ingredient_category        @relation(fields: [category_id], references: [id])
  detail_report detail_report_ingredient[]
  recipe        recipes_ingredient[]

  @@index([category_id])
}

model ingredient_category {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(30)
  ingredients ingredient[]
}

model recipes_ingredient {
  id            Int        @id @default(autoincrement())
  dose          Int
  recipe_id     Int
  recipe        recipe     @relation(fields: [recipe_id], references: [id])
  ingredient_id Int
  ingredients   ingredient @relation(fields: [ingredient_id], references: [id])

  @@index([recipe_id, ingredient_id])
}

model recipe {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(50)
  total_price        Int?
  recipes_ingredient recipes_ingredient[]
}

model report_sales {
  id             String @id @default(cuid())
  reporter       String
  total_income   Int
  total_cash     Int
  total_non_cash Int
  total_expences Int

  non_cash non_cash[]
  expences expences[]

  report_date DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()
}

model non_cash {
  id           Int           @id @default(autoincrement())
  report_id    String?
  report_sales report_sales? @relation(fields: [report_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reciept      String?       @db.LongText
  description  String?       @db.VarChar(30)
  amount       Int?

  @@index([report_id])
}

model expences {
  id           Int           @id @default(autoincrement())
  report_id    String?
  report_sales report_sales? @relation(fields: [report_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  amount       Int?
  description  String?       @db.VarChar(30)

  @@index([report_id])
}

model report_stock {
  id             String                @id @default(cuid())
  report_date    DateTime              @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()
  grand_total    Int?
  report_shift_1 report_stock_shift_1?
  report_shift_2 report_stock_shift_2?
}

model report_stock_shift_1 {
  id        Int          @id @default(autoincrement())
  report_id String       @unique
  reporter  String
  values    Json
  report    report_stock @relation(fields: [report_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([report_id])
}

model report_stock_shift_2 {
  id        Int          @id @default(autoincrement())
  report_id String       @unique
  reporter  String
  values    Json
  report    report_stock @relation(fields: [report_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([report_id])
}

model order_request {
  id Int @id @default(autoincrement())
}

model detail_order {
  id              Int      @id @default(autoincrement())
  expired_date    DateTime @db.Timestamp()
  quantity        Int
  production_date DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()
}
